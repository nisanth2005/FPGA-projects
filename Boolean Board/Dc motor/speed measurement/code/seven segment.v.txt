module seven_seg_driver(
    input clk,
    input rst,
    input [15:0] value,
    output reg [3:0] an,
    output reg [6:0] seg
);
    reg [3:0] digit;
    reg [1:0] scan = 0;
    reg [16:0] refresh = 0;
    wire [3:0] d0 = value % 10;
    wire [3:0] d1 = (value/10) % 10;
    wire [3:0] d2 = (value/100) % 10;
    wire [3:0] d3 = (value/1000) % 10;
    always @(posedge clk) begin
        if(rst) begin
            refresh <= 0;
            scan <= 0;
        end else begin
            refresh <= refresh + 1;
            if(refresh == 100_000) begin
                refresh <= 0;
                scan <= scan + 1;
            end
        end
    end
    always @(*) begin
            case(scan)
                2'b00: begin an = 4'b0111; digit = d0; end
                2'b01: begin an = 4'b1011; digit = d1; end
                2'b10: begin an = 4'b1101; digit = d2; end
                2'b11: begin an = 4'b1110; digit = d3; end
            endcase
        end
    always @(*) begin
        if (rst) begin
            seg = 7'b0000001;   // 0 on seven segment
        end else begin
            case(digit)
                4'd0: seg = 7'b0000001;
                4'd1: seg = 7'b1001111;
                4'd2: seg = 7'b0010010;
                4'd3: seg = 7'b0000110;
                4'd4: seg = 7'b1001100;
                4'd5: seg = 7'b0100100;
                4'd6: seg = 7'b0100000;
                4'd7: seg = 7'b0001111;
                4'd8: seg = 7'b0000000;
                4'd9: seg = 7'b0000100;
            endcase
        end
    end
endmodule
